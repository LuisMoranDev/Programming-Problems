{"version":3,"sources":["components/Header.jsx","components/FizzBuzz.jsx","components/LargeNumber.jsx","components/RunningSum.js","components/NumberSteps.js","components/NumberofJewels.js","components/RestoreString.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","FizzBuzz","useState","value","setValue","answer","setAnswer","isDisplay","setDisplay","changeHandler","e","newValue","target","type","name","onSubmit","onChange","placeholder","onClick","numbers","isNaN","x","push","toString","style","display","LargeNumber","largest","setLargest","number","setNumber","class","length","y","RunningSum","nums","NumberSteps","steps","NumberofJewels","setNumbers","jewels","split","stones","count","RestoreString","s","indices","newString","join","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4df38338.chunk.js","sourcesContent":["import React from 'react'; \nimport './styles/header.css';\n\nfunction Header(){\n    return(\n        <div className='title'>\n            <h1>Answered Programming Questions</h1>\n        </div>\n\n    );\n}\n\nexport default Header; ","import React, {useState} from 'react'; \n\n\nfunction FizzBuzz(){\n    const [value, setValue] = useState(\"\");\n    const [answer, setAnswer] = useState(\"\"); \n    const [isDisplay, setDisplay] = useState(false);\n\n    function changeHandler(e){\n        const newValue = e.target.value; \n        setValue(newValue); \n    }\n\n    function fizzbuzz(){\n        let numbers = []; \n        if(isNaN(value) || value < 1 || value > 20){\n            setAnswer(\"Must be a number, must be greater than 1 and cannot be greater than 20\");\n        }\n\n        else{\n            for(let x = 1; x <= value; x++){\n                if(x % 15 === 0){\n                    numbers.push(\"FizzBuzz\");\n                }\n                else if(x % 5 === 0){\n                    numbers.push(\"Buzz\"); \n                }\n                else if(x % 3 === 0){\n                    numbers.push(\"Fizz\")\n                }\n                else{\n                    numbers.push(x); \n                }\n            } \n        setAnswer(numbers.toString());\n\n        }\n\n        setValue(\"\");\n        setDisplay(true);\n        // setDisplay(true);\n    }\n\n    return(\n        <div className=\"container\">\n            <h2 className=\"heading\">FizzBuzz Challenge</h2>\n            <p className=\"description\">\n            Write a program that outputs the string representation of numbers from 1 to 20.\n            <br/><br/>\n            But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.\n            </p>\n            <input\n            type=\"text\"\n            name=\"number\"\n            onSubmit={changeHandler}\n            onChange={changeHandler}\n            value={value}\n            placeholder=\"Enter a number\"\n            />\n            <button onClick={fizzbuzz}>Enter</button>\n            <p style={{display: isDisplay? \"block\": \"none\"}} className=\"answer\">Answer: <br/>{answer}</p>\n\n        </div>\n    );\n}\n\nexport default FizzBuzz; \n\n","import React, {useState} from 'react'; \n\nfunction LargeNumber(){\n    const[largest, setLargest] = useState(\"\");\n    const[number, setNumber] = useState(\"\");\n    const[isDisplay, setDisplay] = useState(false); \n\n    function getAnswer(){\n        let answer = [10,15,2,4,6,20,4,33];\n        for(let x = 0; x < answer.length; x++){\n            for(let y = 1; y < answer.length; y++){\n                if(answer[x] > answer[y] && answer[x] / 2 >= 1){\n                    setLargest(x);\n                    setNumber(answer[x]);\n                    setDisplay(true);\n                }\n            }\n        }\n    }\n\n    return(\n        <div className=\"container\">\n            <h2 class=\"heading\">\n            Largest Number At Least Twice of Others\n            </h2>\n            <p className=\"description\">\n            In a given integer array nums, there is always exactly one largest element.\n            <br />\n            Find whether the largest element in the array is at least twice as much as every other number in the array.\n            <br />\n            If it is, return the index of the largest element, otherwise return -1\n            <br /> \n            Given Arrays: <br/>Ex1:[10, 15, 2, 4, 6, 20, 4, 33]\n            </p>\n            <button onClick={getAnswer}>Answer</button>\n            <p style={{display: isDisplay ? \"block\": \"none\"}}className=\"answer\">Answer: <br/> Index: {largest} <br/> Number: {number}</p>\n        </div>\n    );\n}\n\n\nexport default LargeNumber;","import React, {useState} from 'react'; \n\n\nconst RunningSum = () => {\n    const [isDisplay, setDisplay] = useState(false);\n    const [numbers, setNumber] = useState(\"\"); \n\n    function addSum(){\n        let nums = [1,2,3,4,5,6]; \n        for(let x = 1; x < nums.length; x++){\n            nums[x] = nums[x-1] + nums[x]; \n        }\n        setNumber(nums.toString());\n        setDisplay(true);\n    }\n\n    return(\n        <div className=\"container\">\n            <h2 className=\"heading\">Running Sum of Numbers</h2>\n            <p className=\"description\">Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]). <br/><br/>\n            Return the running sum of nums.<br/>\n            Input: nums = [1,2,3,4,5,6]\n            </p> \n            <button onClick={addSum}>Answer</button>\n            <p style={{display: isDisplay ? \"block\": \"none\"}}className=\"answer\">Answer: <br/> {numbers}</p>\n\n        </div>\n    );\n}\n\nexport default RunningSum; ","import React, {useState} from 'react'; \n\nconst NumberSteps = () => {\n    const [value, setValue] = useState(\"\"); \n    const [number, setNumber] = useState(\"\"); \n    const [isDisplay, setDisplay] = useState(false);\n    \n\n    function changeHandler(e){\n        let newValue = e.target.value; \n        setValue(newValue); \n    }\n\n    function numberOfSteps(){\n        let steps = 0; \n        if(isNaN(value) || value < 1 || value === \"\"){\n            setNumber(\"Input must be a number greater than 0\");\n        }\n        else{\n            let nums = value; \n        while(nums !== 0){\n            if(nums % 2 === 0){\n                nums = nums/2; \n                steps++;\n            }\n            else{\n                nums--\n                steps++;\n            }\n        }\n        setNumber(steps); \n        setDisplay(true); \n\n        }\n     \n    }\n\n    return(\n        <div className=\"container\">\n            <h2 className=\"heading\">Number of Steps   </h2>\n            <p className=\"description\">Given a non-negative integer num, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it. </p>\n            <input\n            type=\"text\"\n            name=\"number\"\n            onChange={changeHandler}\n            value={value}\n            placeholder=\"Enter a number\"\n            />\n            <button onClick={numberOfSteps}>Enter</button>\n            <p style={{display: isDisplay ? \"block\": \"none\"}} className=\"answer\">Answer: {number}</p>\n        </div>\n    ); \n}\n\n\nexport default NumberSteps; ","import React, {useState} from 'react'; \n\nconst NumberofJewels = () => {\n    const [isDisplay, setDisplay] = useState(false); \n    const [numbers, setNumbers] = useState(\"\"); \n    \n    function numJewelsInStones(){\n        let j = \"aA\";\n        let s = \"aAAbbcadfasdfhdfafefsadfafA\";\n\n        let jewels = j.split(\"\");  \n        let stones = s.split(\"\");\n        let count = 0; \n        for(let x=0; x < jewels.length; x++){\n            for(let y=0; y < stones.length; y++){\n                if(jewels[x] === stones[y]){\n                    count++; \n                }\n            }\n        }\n        setNumbers(count);\n        setDisplay(true);  \n    }\n\n    return(\n        <div className=\"container\">\n            <h2 className=\"heading\">Number of Jewels In Stones</h2>\n            <p className=\"description\">You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels. <br /> <br /> \n            The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\". \n            <br /> \n            Inputs: <br/> J = \"aA\" <br/> S = \"aAAbbcadfasdfhdfafefsadfafA\"\n            </p>\n            <button onClick={numJewelsInStones}>Answer</button>\n            <p style={{display: isDisplay ? \"block\": \"none\"}} className=\"answer\">Answer: {numbers}</p>\n\n            \n        </div>\n\n    ); \n\n}\n\nexport default NumberofJewels; \n\n","import React, {useState} from 'react'; \n\nconst RestoreString = () => {\n    const [isDisplay, setDisplay] = useState(false); \n    const [answer, setAnswer] = useState(\"\"); \n    \n    function restore(){\n        let s = \"codeleet\";\n        let indices = [4,5,6,7,0,2,1,3];\n        let newString = []; \n        for(let x = 0; x < s.length; x++){\n            newString[indices[x]] = s[x];\n        }\n        setAnswer(newString.join(''));\n        setDisplay(true);  \n    }\n\n    return(\n        <div className=\"container\"> \n            <h2 className=\"heading\">\n                Shuffle String\n            </h2>\n            <p className=\"description\">Given a string s and an integer array indices of the same length.<br/>The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.Return the shuffled string.<br/>\n            Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]</p>\n            <button onClick={restore}>Answer</button>\n            <p className=\"answer\" style={{display: isDisplay? \"block\": \"none\"}}>Answer: {answer}</p>\n\n        \n        </div>\n    );\n\n}\n\nexport default RestoreString; ","import React from 'react';\nimport './styles/App.css';\nimport Header from './Header.jsx'; \nimport FizzBuzz from './FizzBuzz.jsx'; \nimport LargeNumber from './LargeNumber.jsx';\nimport RunningSum from './RunningSum'; \nimport NumberSteps from './NumberSteps'; \nimport NumberofJewels from './NumberofJewels'; \nimport RestoreString from './RestoreString'; \n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <FizzBuzz /> \n      <LargeNumber /> \n      <RunningSum /> \n      <NumberSteps /> \n      <NumberofJewels /> \n      <RestoreString /> \n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}